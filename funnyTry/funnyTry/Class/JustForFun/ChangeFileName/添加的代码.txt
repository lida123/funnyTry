+ (UIColor *)colorAtPoint:(CGPoint)point {
    UIImage *image;
    if (!CGRectContainsPoint(CGRectMake(0, 0, image.size.width, image.size.height), point)) {
        return nil;
    }
    
    CGFloat pointX = truncf(point.x);
    CGFloat pointY = truncf(point.y);
    CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();
    
    unsigned char pixelData[4];
    CGContextRef context =  CGBitmapContextCreate(&pixelData, 1, 1, 8, 4, colorSpaceRef, kCGImageAlphaPremultipliedLast);
    CGColorSpaceRelease(colorSpaceRef);
    
    CGContextSetBlendMode(context, kCGBlendModeCopy);
    CGContextTranslateCTM(context, -pointX, pointY - image.size.height);
    CGContextDrawImage(context, CGRectMake(0, 0, image.size.width, image.size.height), image.CGImage);
    CGFloat r = pixelData[0]/255.0;
    CGFloat g = pixelData[1]/255.0;
    CGFloat b = pixelData[2]/255.0;
    CGFloat a = pixelData[3]/255.0;
    UIColor * color = [UIColor colorWithRed:r green:g blue:b alpha:a];
    CGContextRelease(context);
    return color;
}

+ (UIColor *)colorAtPoint2:(CGPoint)point {
    UIImage *image;
    if (!CGRectContainsPoint(CGRectMake(0, 0, image.size.width, image.size.height), point)) {
        return nil;
    }
    
    CGFloat pointX = truncf(point.x);
    CGFloat pointY = truncf(point.y);
    CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();
    
    unsigned char pixelData[4];
    CGContextRef context =  CGBitmapContextCreate(&pixelData, 1, 1, 8, 4, colorSpaceRef, kCGImageAlphaPremultipliedLast);
    CGColorSpaceRelease(colorSpaceRef);
    
    CGContextSetBlendMode(context, kCGBlendModeCopy);
    CGContextTranslateCTM(context, -pointX, pointY - image.size.height);
    CGContextDrawImage(context, CGRectMake(0, 0, image.size.width, image.size.height), image.CGImage);
    CGFloat r = pixelData[0]/255.0;
    CGFloat g = pixelData[1]/255.0;
    CGFloat b = pixelData[2]/255.0;
    CGFloat a = pixelData[3]/255.0;
    UIColor * color = [UIColor colorWithRed:r green:g blue:b alpha:a];
    CGContextRelease(context);
    return color;
}

+ (UIColor *)colorAtPoint3:(CGPoint)point {
    UIImage *image;
    if (!CGRectContainsPoint(CGRectMake(0, 0, image.size.width, image.size.height), point)) {
        return nil;
    }
    
    CGFloat pointX = truncf(point.x);
    CGFloat pointY = truncf(point.y);
    CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();
    
    unsigned char pixelData[4];
    CGContextRef context =  CGBitmapContextCreate(&pixelData, 1, 1, 8, 4, colorSpaceRef, kCGImageAlphaPremultipliedLast);
    CGColorSpaceRelease(colorSpaceRef);
    
    CGContextSetBlendMode(context, kCGBlendModeCopy);
    CGContextTranslateCTM(context, -pointX, pointY - image.size.height);
    CGContextDrawImage(context, CGRectMake(0, 0, image.size.width, image.size.height), image.CGImage);
    CGFloat r = pixelData[0]/255.0;
    CGFloat g = pixelData[1]/255.0;
    CGFloat b = pixelData[2]/255.0;
    CGFloat a = pixelData[3]/255.0;
    UIColor * color = [UIColor colorWithRed:r green:g blue:b alpha:a];
    CGContextRelease(context);
    return color;
}
@end
