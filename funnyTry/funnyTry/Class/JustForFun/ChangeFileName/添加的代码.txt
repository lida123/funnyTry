- (UIImage*)newImageWithRotatedAngle1:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
[self newImageWithRotatedAngle2:0];
return newImage;
}

- (UIImage*)newImageWithRotatedAngle2:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
[self newImageWithRotatedAngle3:0];
return newImage;
}

- (UIImage*)newImageWithRotatedAngle3:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
[self newImageWithRotatedAngle4:0];
return newImage;
}

- (UIImage*)newImageWithRotatedAngle4:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
[self newImageWithRotatedAngle5:0];
return newImage;
}

- (UIImage*)newImageWithRotatedAngle5:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
[self newImageWithRotatedAngle6:0];
return newImage;
}

- (UIImage*)newImageWithRotatedAngle6:(CGFloat)angel{
UIImage *oldImage = nil;

// 旋转一个矩形view后,如果不是旋转90度的倍数,它的frame会变大,这个大小才是画板的大小
UIView *rotatedViewBox = [[UIView alloc] initWithFrame:CGRectMake(0,0,oldImage.size.width, oldImage.size.height)];
rotatedViewBox.transform = CGAffineTransformMakeRotation(angel * M_PI / 180.0);
CGSize rotatedSize = rotatedViewBox.frame.size;

// Create the bitmap context
UIGraphicsBeginImageContextWithOptions(rotatedSize, NO, 0);
CGContextRef bitmap = UIGraphicsGetCurrentContext();

// 平移后bitmap的原点是刚开始的中心位置
CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);

// 旋转
CGContextRotateCTM(bitmap,angel * M_PI / 180.0);

// 画图片 因为最终获取图片还是从初始状态的位图获取图片,所以画的时候,根据变化的bitmap位置进行偏移
[oldImage drawInRect: CGRectMake(-oldImage.size.width / 2, -oldImage.size.height / 2, oldImage.size.width, oldImage.size.height)];

// 如果不是旋转90度的倍数 获取的图片大小虽然跟原始图片一样,但是因为是歪的,所以图片会是空白部分加上缩小的原图片组成的(好比要把一张图片放进一个一样大小的相框中,如果图片摆得是正的,可以放进去,如果不是正的,那只能将图片按比例缩小,图片的四个顶点顶在相框的四条边上)
UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();

return newImage;
}
@end
